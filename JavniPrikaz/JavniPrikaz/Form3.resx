<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAw
        AAAAMQACAE4ABAAyAAAAAAAAAAAAAAAAAAAAAAAAAGgAAABHAAoAYQAJAGEAAAB1AAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAP8AAABF
        AA4AYgAvAGwAMABRADsAbAB7AHkAFQB3AAAAYwAAAAAAAABXAAAAQQAYAGQAiwBtAEYATwAVAGAAGgBY
        AAcAbAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADsAAAAr
        AAcAXgBRAHIAtgB6AOcAfADtAHgAywBqALcAbgCNAHQAIABrAAAAAAAAAE8AKQBkAIkAZwCGAGoAmAB1
        ANUAeADaAHYAqABzAEYAaAAGAG0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABC
        AAAALAAFAFsAUgBuAMMAdQDRAHMAxQBzAMsAeADrAHsA7QBxAMcAbQCvAHMAYABmAGcAZwCSAGcAiQBz
        AM0AeQD1AHUA2wBxAMwAcADRAG8AwgBtAFAAZQACAGoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAASgAAADoADgBoAHYAeQC+AHsAxwB6AMwAdwDiAH0A7QB3AMYAbwCVAHcAqQB2ALkAdgCcAHEAqAB0
        ALcAeQDCAHQAtQBvAMoAdwDgAHcA4AB4ANcAeADXAHgAyAB4AHUAdwANAHcAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAACQAAAAAAAIAVABKAG0AfgBzAIIAdgCjAGcAmAB8AOEAgQCOAHgAJwBiAAQANwAGAFgACwBE
        AAMARAAJAGQAHQBqABYAPAAKAF4ANgBvAJoAewDnAG0AmQBtAJYAcAB9AGkAgQBnAFEAYgADAGQAAAAA
        AAAAAAAAAAAAAAA9AAAAKQAGAGgAUwB9ALwAgQDdAIIA9wB9AMIAdgDGAIYAfgB5AAgAfgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAAAACYACgBpAIEAeQDQAG4AuwB/APIAfQDUAHsArwB6
        AEgAcAAEAHQAAAAAAAAAEQAAAAAAAABpAGsAhQDgAIIAxABwAKkAggDkAHEAjAB6AFYAgAAGAHwAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPQAAACkACABnAGMAZgCSAHoA4wB0
        ALkAeQDMAIEA4gCEAG8AdAABAH0AAABAAAAAQAAcAHgArQB5AI8AfgC4AHMAuQCKAMcAeQAeAHAAAQCC
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAAAADUAAwBD
        ACIAdAC5AHgAwAB1AK0AcgCRAHoAugCFACcAhQAAAFsAAABMADEAcgClAIcA4wCNAOMAdQCuAIwAeACe
        AAAAgQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAwAAANgAAABlAGoAeQC6AHoA1ACHAOAAdAClAHMAQwBwAAAA/wAAAGoAZgCNAOsAggDWAIkA0ABz
        AH8AjQAcAI4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAARAAAAEQAGABqAIcAdgDCAH8A5QCIAOwAhgBwAE8AAABMACoAhwDNAIcAtwBy
        AJ8AjwC8AHcAHAAAAAAAgQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAA/wAAAEQAHgB0AKoAfwCwAHQAsQCLANYAjgA1AGoAbwCE
        ALcAhwDEAH4AqwCQAKIApAAEAI4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAA/wAAAHEAjAB9ALMAfgC7AHoAtwCM
        AIcAYwBpAIEAvwCWAPgAgwCkAIcAdQAAAAAAiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAADHAAAAagBqAHYAnwCK
        AO4AhgDGAHoAhwBgAFQAlADmAIoA2QCVALMAegAhAGcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAHIAAABO
        ACEAcwCZAIcA5ACPAOkAjABvAHsAlgCaANoAdQCTAJkAzQClABwAoQAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAHgAAAAUACgCCALQAhACnAIQAzQCaALMAhACzAI8AtACGAKsAiwC4AKMAOgCjAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAABBAAAARgAgAIcAvAB+AKQAfQCuAJcA0QB8AJQAhAChAJsA6gCMAKkAjgA7AI0AAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAFkAAABVACsAeACeAJAA3ACIAKkAjACxAGAAPgCFAKUAlQDgAKEA4ACg
        AEYAoQAAAHsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYQAAAE8AJwCLAMYAkgDrAJIAtwB8AFwAAAAKAJAAsgCR
        ALcAjgC1AKMApACrAAsApwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAAAAAAAEAfQB+AJkAzwB9AK4AnADGAJoAGgAN
        AA0AkwC1AJIAwwCcAKwAhwB/AJgAIgCZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANQAAADwAEgB+AIEAhgCUAIgAvgCc
        AMkAqQAeAAAAAgCGAIYAjwC6AJ0A4ACiAMIAqABSAJMAAQCfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAACXAAAAYwAsAI4ApwCW
        AOAAkQDBAJcApQCzAA4AiwAAAGUAKACBAJQAoQC6AIwArACpANUArwA2ALAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAAAE0AGQCT
        ALYAnwDJAIoAsACVALEAjQBGAFwAAAAxAAAAeAAAAGEALQCbALcAjACkAJsAygCaAFoAigAAAKUAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0AAACN
        AAAAaQBEAJAAxACSAKoAkwC3AKcAVAAAAAEAiwAAAAAAAAAcAAAAAAABAH8ATACHAJgApgDkAK0AawDF
        AAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAJ0AAABpAEMAogDeAJcAsACcAHMAsgAJAKcAAAAAAAAAAAAAAAAAAAAtAAAAOAABAFkAFACL
        AG8ApwC+AKkAOQC7AAAAlgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAMAAAB0AAAAVQAaAJcArACvAKQAjgAsAJkABwCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAANgAAAAoAAgB8ADEAkQBPAJsACQCaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAANQAAAAcAAwB8AE4AoQBWAKMADQCpAAAATwAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAIcAAABjAAIAgQABAIMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBAAAASgABAHkABgC5AAAAqQAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////5+f//wPA//wBgD/4AAAf8AAAD+AAAAfAH/gDwD/8AYB/
        /gGB//+Bgf//gQP//8AD///gB///4Af//+AH///gB///4Af//+AH///gA///wAP//8AB///Agf//gcH/
        /4HB//+D4P//B/h//h/+f/5///////////8=
</value>
  </data>
</root>